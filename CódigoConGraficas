#! /usr/bin/env python

import numpy as np
import pyaudio
import sys
import matplotlib.pyplot as plt
import matplotlib.animation as animation

NOTE_MIN = 40       # E2 (Mi grave de la guitarra)
NOTE_MAX = 76       # E5 (Mi agudo de la guitarra)
FSAMP = 44100       # Frecuencia de muestreo en Hz (mejor precisión)
FRAME_SIZE = 4096   # Tamaño del frame (mayor resolución)
FRAMES_PER_FFT = 8  # FFT promedia sobre menos frames para menor latencia

# Cálculos derivados
SAMPLES_PER_FFT = FRAME_SIZE * FRAMES_PER_FFT
FREQ_STEP = float(FSAMP) / SAMPLES_PER_FFT

# Nombres de notas en la escala cromática
NOTE_NAMES = 'C C# D D# E F F# G G# A A# B'.split()

# Frecuencias estándar de las cuerdas de una guitarra en afinación estándar
guitar_frequencies = {
    'E2': 82.41,
    'A2': 110.00,
    'D3': 146.83,
    'G3': 196.00,
    'B3': 246.94,
    'E4': 329.63
}

# Funciones de conversión de frecuencia a número de nota y viceversa
def freq_to_number(f): return 12 * np.log2(f / 440.0) + 69

def number_to_freq(n): return 440.0 * 2.0**((n - 69) / 12.0)

def note_name(n): return NOTE_NAMES[int(n) % 12] + str(int(n / 12 - 1))

# Conversión de nota a índice FFT
def note_to_fftbin(n): return number_to_freq(n) / FREQ_STEP

imin = max(0, int(np.floor(note_to_fftbin(NOTE_MIN - 1))))
imax = min(SAMPLES_PER_FFT, int(np.ceil(note_to_fftbin(NOTE_MAX + 1))))

# Inicializar buffer y audio
buf = np.zeros(SAMPLES_PER_FFT, dtype=np.float32)
num_frames = 0
stream = pyaudio.PyAudio().open(format=pyaudio.paInt16,
                                channels=1,
                                rate=FSAMP,
                                input=True,
                                frames_per_buffer=FRAME_SIZE)
stream.start_stream()

# Ventana de Hanning para suavizar los datos
window = 0.5 * (1 - np.cos(np.linspace(0, 2 * np.pi, SAMPLES_PER_FFT, False)))

print('Afinador de guitarra - Sampling a', FSAMP, 'Hz con resolución de', FREQ_STEP, 'Hz')
print()

# Configuración de la gráfica
fig, ax = plt.subplots()
x_data, y_diff = [], []
line_diff, = ax.plot([], [], 'r-', label='Diferencia de Frecuencia')
ax.set_xlim(0, 100)
ax.set_ylim(-50, 50)  # Ajustado para mostrar diferencias en Hz
ax.set_xlabel("Tiempo")
ax.set_ylabel("Diferencia de Frecuencia (Hz)")
ax.legend()
ax.axhline(0, color='black', linestyle='--')  # Línea de referencia en 0 Hz

def update(frame):
    global x_data, y_diff, num_frames
    try:
        # Leer los datos de audio
        buf[:-FRAME_SIZE] = buf[FRAME_SIZE:]
        buf[-FRAME_SIZE:] = np.frombuffer(stream.read(FRAME_SIZE), np.int16)
        
        # Realizar la FFT
        fft = np.fft.rfft(buf * window)
        freq = (np.abs(fft[imin:imax]).argmax() + imin) * FREQ_STEP
        n = freq_to_number(freq)
        n0 = int(round(n))
        detected_note = note_name(n0)
        
        # Buscar la cuerda más cercana
        closest_string = min(guitar_frequencies, key=lambda note: abs(guitar_frequencies[note] - freq))
        freq_diff = freq - guitar_frequencies[closest_string]
        
        # Borrar la línea anterior antes de imprimir la nueva
        sys.stdout.write('\r')
        sys.stdout.write('Frecuencia: {:7.2f} Hz   Nota: {:>3s} ({})   Diferencia: {:+.2f} Hz '.format(
            freq, detected_note, closest_string, freq_diff))
        sys.stdout.flush()
        
        # Actualizar datos para la gráfica
        x_data.append(num_frames)
        y_diff.append(freq_diff)
        
        if len(x_data) > 100:
            x_data.pop(0)
            y_diff.pop(0)
        
        line_diff.set_data(x_data, y_diff)
        ax.set_xlim(max(0, num_frames - 100), num_frames)
        
        num_frames += 1
    except IOError:
        print("\nError de audio. Probablemente el flujo de audio se haya detenido.")
        stream.stop_stream()
        stream.close()
        pyaudio.PyAudio().terminate()
        plt.close()
    
    return line_diff,

ani = animation.FuncAnimation(fig, update, interval=50, blit=False)
plt.show()

# Detener el flujo de audio de manera segura
print("\nAfinador detenido")
stream.stop_stream()
stream.close()
pyaudio.PyAudio().terminate()
